(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[20],{

/***/ "./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GeoJsonLayer; });\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @deck.gl/core */ \"./node_modules/@deck.gl/core/dist/esm/lib/composite-layer.js\");\n/* harmony import */ var _scatterplot_layer_scatterplot_layer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../scatterplot-layer/scatterplot-layer */ \"./node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer.js\");\n/* harmony import */ var _path_layer_path_layer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../path-layer/path-layer */ \"./node_modules/@deck.gl/layers/dist/esm/path-layer/path-layer.js\");\n/* harmony import */ var _luma_gl_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @luma.gl/core */ \"./node_modules/@luma.gl/core/dist/esm/materials/phong-material.js\");\n/* harmony import */ var _solid_polygon_layer_solid_polygon_layer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../solid-polygon-layer/solid-polygon-layer */ \"./node_modules/@deck.gl/layers/dist/esm/solid-polygon-layer/solid-polygon-layer.js\");\n/* harmony import */ var _geojson__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./geojson */ \"./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultMaterial = new _luma_gl_core__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  elevationScale: 1,\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0,\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineDashJustified: false,\n  fp64: false,\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineDashArray: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: defaultMaterial\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nfunction unwrappingAccessor(accessor) {\n  if (typeof accessor !== 'function') return accessor;\n  return function (feature) {\n    return accessor(Object(_geojson__WEBPACK_IMPORTED_MODULE_10__[\"unwrapSourceFeature\"])(feature));\n  };\n}\n\nvar GeoJsonLayer = function (_CompositeLayer) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(GeoJsonLayer, _CompositeLayer);\n\n  function GeoJsonLayer() {\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GeoJsonLayer);\n\n    return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(GeoJsonLayer).apply(this, arguments));\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GeoJsonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        features: {}\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged) {\n        var data = props.data;\n        var features = Object(_geojson__WEBPACK_IMPORTED_MODULE_10__[\"getGeojsonFeatures\"])(data);\n        this.state.features = Object(_geojson__WEBPACK_IMPORTED_MODULE_10__[\"separateGeojsonFeatures\"])(features);\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info,\n          sourceLayer = _ref2.sourceLayer;\n      return Object.assign(info, {\n        object: info.object ? Object(_geojson__WEBPACK_IMPORTED_MODULE_10__[\"unwrapSourceFeature\"])(info.object) : info.object,\n        index: info.object ? Object(_geojson__WEBPACK_IMPORTED_MODULE_10__[\"unwrapSourceFeatureIndex\"])(info.object) : info.index\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var features = this.state.features;\n      var pointFeatures = features.pointFeatures,\n          lineFeatures = features.lineFeatures,\n          polygonFeatures = features.polygonFeatures,\n          polygonOutlineFeatures = features.polygonOutlineFeatures;\n      var _this$props = this.props,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$props2 = this.props,\n          lineWidthUnits = _this$props2.lineWidthUnits,\n          lineWidthScale = _this$props2.lineWidthScale,\n          lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n          lineJointRounded = _this$props2.lineJointRounded,\n          lineMiterLimit = _this$props2.lineMiterLimit,\n          pointRadiusScale = _this$props2.pointRadiusScale,\n          pointRadiusMinPixels = _this$props2.pointRadiusMinPixels,\n          pointRadiusMaxPixels = _this$props2.pointRadiusMaxPixels,\n          elevationScale = _this$props2.elevationScale,\n          lineDashJustified = _this$props2.lineDashJustified,\n          fp64 = _this$props2.fp64;\n      var _this$props3 = this.props,\n          getLineColor = _this$props3.getLineColor,\n          getFillColor = _this$props3.getFillColor,\n          getRadius = _this$props3.getRadius,\n          getLineWidth = _this$props3.getLineWidth,\n          getLineDashArray = _this$props3.getLineDashArray,\n          getElevation = _this$props3.getElevation,\n          updateTriggers = _this$props3.updateTriggers;\n      var PolygonFillLayer = this.getSubLayerClass('polygons-fill', _solid_polygon_layer_solid_polygon_layer__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n      var PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', _path_layer_path_layer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n      var LineStringsLayer = this.getSubLayerClass('line-strings', _path_layer_path_layer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n      var PointsLayer = this.getSubLayerClass('points', _scatterplot_layer_scatterplot_layer__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n      var polygonFillLayer = this.shouldRenderSubLayer('polygons-fill', polygonFeatures) && new PolygonFillLayer({\n        fp64: fp64,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        material: material,\n        getElevation: unwrappingAccessor(getElevation),\n        getFillColor: unwrappingAccessor(getFillColor),\n        getLineColor: unwrappingAccessor(getLineColor),\n        transitions: transitions && {\n          getPolygon: transitions.geometry,\n          getElevation: transitions.getElevation,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-fill',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: polygonFeatures,\n        getPolygon: getCoordinates\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) && new PolygonStrokeLayer({\n        fp64: fp64,\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: unwrappingAccessor(getLineColor),\n        getWidth: unwrappingAccessor(getLineWidth),\n        getDashArray: unwrappingAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-stroke',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: polygonOutlineFeatures,\n        getPath: getCoordinates\n      });\n      var pathLayer = this.shouldRenderSubLayer('linestrings', lineFeatures) && new LineStringsLayer({\n        fp64: fp64,\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: unwrappingAccessor(getLineColor),\n        getWidth: unwrappingAccessor(getLineWidth),\n        getDashArray: unwrappingAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'line-strings',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: lineFeatures,\n        getPath: getCoordinates\n      });\n      var pointLayer = this.shouldRenderSubLayer('points', pointFeatures) && new PointsLayer({\n        fp64: fp64,\n        stroked: stroked,\n        filled: filled,\n        radiusScale: pointRadiusScale,\n        radiusMinPixels: pointRadiusMinPixels,\n        radiusMaxPixels: pointRadiusMaxPixels,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        getFillColor: unwrappingAccessor(getFillColor),\n        getLineColor: unwrappingAccessor(getLineColor),\n        getRadius: unwrappingAccessor(getRadius),\n        getLineWidth: unwrappingAccessor(getLineWidth),\n        transitions: transitions && {\n          getPosition: transitions.geometry,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor,\n          getRadius: transitions.getRadius,\n          getLineWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'points',\n        updateTriggers: {\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getRadius: updateTriggers.getRadius,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }), {\n        data: pointFeatures,\n        getPosition: getCoordinates\n      });\n      return [!extruded && polygonFillLayer, polygonLineLayer, pathLayer, pointLayer, extruded && polygonFillLayer];\n    }\n  }]);\n\n  return GeoJsonLayer;\n}(_deck_gl_core__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n//# sourceMappingURL=geojson-layer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js\n");

/***/ }),

/***/ "./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson.js":
/*!************************************************************************!*\
  !*** ./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson.js ***!
  \************************************************************************/
/*! exports provided: getGeojsonFeatures, separateGeojsonFeatures, unwrapSourceFeature, unwrapSourceFeatureIndex, validateGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getGeojsonFeatures\", function() { return getGeojsonFeatures; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"separateGeojsonFeatures\", function() { return separateGeojsonFeatures; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unwrapSourceFeature\", function() { return unwrapSourceFeature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unwrapSourceFeatureIndex\", function() { return unwrapSourceFeatureIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateGeometry\", function() { return validateGeometry; });\n/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ \"./node_modules/@deck.gl/core/dist/esm/utils/log.js\");\n\nfunction getGeojsonFeatures(geojson) {\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      return [geojson];\n\n    case 'FeatureCollection':\n      _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n\n    default:\n      return [{\n        geometry: geojson\n      }];\n  }\n}\nfunction separateGeojsonFeatures(features) {\n  var separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n\n  for (var featureIndex = 0; featureIndex < features.length; featureIndex++) {\n    var feature = features[featureIndex];\n    _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n    var geometry = feature.geometry;\n    var sourceFeature = {\n      feature: feature,\n      index: featureIndex\n    };\n\n    if (geometry.type === 'GeometryCollection') {\n      _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      var geometries = geometry.geometries;\n\n      for (var i = 0; i < geometries.length; i++) {\n        var subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, sourceFeature);\n      }\n    } else {\n      separateGeometry(geometry, separated, sourceFeature);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, sourceFeature) {\n  var type = geometry.type,\n      coordinates = geometry.coordinates;\n  var pointFeatures = separated.pointFeatures,\n      lineFeatures = separated.lineFeatures,\n      polygonFeatures = separated.polygonFeatures,\n      polygonOutlineFeatures = separated.polygonOutlineFeatures;\n\n  if (!validateGeometry(type, coordinates)) {\n    _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].warn(\"\".concat(type, \" coordinates are malformed\"))();\n    return;\n  }\n\n  switch (type) {\n    case 'Point':\n      pointFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      break;\n\n    case 'MultiPoint':\n      coordinates.forEach(function (point) {\n        pointFeatures.push({\n          geometry: {\n            type: 'Point',\n            coordinates: point\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'LineString':\n      lineFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      break;\n\n    case 'MultiLineString':\n      coordinates.forEach(function (path) {\n        lineFeatures.push({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'Polygon':\n      polygonFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      coordinates.forEach(function (path) {\n        polygonOutlineFeatures.push({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'MultiPolygon':\n      coordinates.forEach(function (polygon) {\n        polygonFeatures.push({\n          geometry: {\n            type: 'Polygon',\n            coordinates: polygon\n          },\n          sourceFeature: sourceFeature\n        });\n        polygon.forEach(function (path) {\n          polygonOutlineFeatures.push({\n            geometry: {\n              type: 'LineString',\n              coordinates: path\n            },\n            sourceFeature: sourceFeature\n          });\n        });\n      });\n      break;\n\n    default:\n  }\n}\n\nfunction unwrapSourceFeature(wrappedFeature) {\n  return wrappedFeature.sourceFeature.feature;\n}\nfunction unwrapSourceFeatureIndex(wrappedFeature) {\n  return wrappedFeature.sourceFeature.index;\n}\nvar COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\nfunction validateGeometry(type, coordinates) {\n  var nestLevel = COORDINATE_NEST_LEVEL[type];\n  _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(nestLevel, \"Unknown GeoJSON type \".concat(type));\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}\n//# sourceMappingURL=geojson.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRlY2suZ2wvbGF5ZXJzL2Rpc3QvZXNtL2dlb2pzb24tbGF5ZXIvZ2VvanNvbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGVjay5nbC9sYXllcnMvZGlzdC9lc20vZ2VvanNvbi1sYXllci9nZW9qc29uLmpzPzMzZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nIH0gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2VvanNvbkZlYXR1cmVzKGdlb2pzb24pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZ2VvanNvbikpIHtcbiAgICByZXR1cm4gZ2VvanNvbjtcbiAgfVxuXG4gIGxvZy5hc3NlcnQoZ2VvanNvbi50eXBlLCAnR2VvSlNPTiBkb2VzIG5vdCBoYXZlIHR5cGUnKTtcblxuICBzd2l0Y2ggKGdlb2pzb24udHlwZSkge1xuICAgIGNhc2UgJ0ZlYXR1cmUnOlxuICAgICAgcmV0dXJuIFtnZW9qc29uXTtcblxuICAgIGNhc2UgJ0ZlYXR1cmVDb2xsZWN0aW9uJzpcbiAgICAgIGxvZy5hc3NlcnQoQXJyYXkuaXNBcnJheShnZW9qc29uLmZlYXR1cmVzKSwgJ0dlb0pTT04gZG9lcyBub3QgaGF2ZSBmZWF0dXJlcyBhcnJheScpO1xuICAgICAgcmV0dXJuIGdlb2pzb24uZmVhdHVyZXM7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIGdlb21ldHJ5OiBnZW9qc29uXG4gICAgICB9XTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcGFyYXRlR2VvanNvbkZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gIHZhciBzZXBhcmF0ZWQgPSB7XG4gICAgcG9pbnRGZWF0dXJlczogW10sXG4gICAgbGluZUZlYXR1cmVzOiBbXSxcbiAgICBwb2x5Z29uRmVhdHVyZXM6IFtdLFxuICAgIHBvbHlnb25PdXRsaW5lRmVhdHVyZXM6IFtdXG4gIH07XG5cbiAgZm9yICh2YXIgZmVhdHVyZUluZGV4ID0gMDsgZmVhdHVyZUluZGV4IDwgZmVhdHVyZXMubGVuZ3RoOyBmZWF0dXJlSW5kZXgrKykge1xuICAgIHZhciBmZWF0dXJlID0gZmVhdHVyZXNbZmVhdHVyZUluZGV4XTtcbiAgICBsb2cuYXNzZXJ0KGZlYXR1cmUgJiYgZmVhdHVyZS5nZW9tZXRyeSwgJ0dlb0pTT04gZG9lcyBub3QgaGF2ZSBnZW9tZXRyeScpO1xuICAgIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2VvbWV0cnk7XG4gICAgdmFyIHNvdXJjZUZlYXR1cmUgPSB7XG4gICAgICBmZWF0dXJlOiBmZWF0dXJlLFxuICAgICAgaW5kZXg6IGZlYXR1cmVJbmRleFxuICAgIH07XG5cbiAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicpIHtcbiAgICAgIGxvZy5hc3NlcnQoQXJyYXkuaXNBcnJheShnZW9tZXRyeS5nZW9tZXRyaWVzKSwgJ0dlb0pTT04gZG9lcyBub3QgaGF2ZSBnZW9tZXRyaWVzIGFycmF5Jyk7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IGdlb21ldHJ5Lmdlb21ldHJpZXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbWV0cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3ViR2VvbWV0cnkgPSBnZW9tZXRyaWVzW2ldO1xuICAgICAgICBzZXBhcmF0ZUdlb21ldHJ5KHN1Ykdlb21ldHJ5LCBzZXBhcmF0ZWQsIHNvdXJjZUZlYXR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXBhcmF0ZUdlb21ldHJ5KGdlb21ldHJ5LCBzZXBhcmF0ZWQsIHNvdXJjZUZlYXR1cmUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZXBhcmF0ZWQ7XG59XG5cbmZ1bmN0aW9uIHNlcGFyYXRlR2VvbWV0cnkoZ2VvbWV0cnksIHNlcGFyYXRlZCwgc291cmNlRmVhdHVyZSkge1xuICB2YXIgdHlwZSA9IGdlb21ldHJ5LnR5cGUsXG4gICAgICBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICB2YXIgcG9pbnRGZWF0dXJlcyA9IHNlcGFyYXRlZC5wb2ludEZlYXR1cmVzLFxuICAgICAgbGluZUZlYXR1cmVzID0gc2VwYXJhdGVkLmxpbmVGZWF0dXJlcyxcbiAgICAgIHBvbHlnb25GZWF0dXJlcyA9IHNlcGFyYXRlZC5wb2x5Z29uRmVhdHVyZXMsXG4gICAgICBwb2x5Z29uT3V0bGluZUZlYXR1cmVzID0gc2VwYXJhdGVkLnBvbHlnb25PdXRsaW5lRmVhdHVyZXM7XG5cbiAgaWYgKCF2YWxpZGF0ZUdlb21ldHJ5KHR5cGUsIGNvb3JkaW5hdGVzKSkge1xuICAgIGxvZy53YXJuKFwiXCIuY29uY2F0KHR5cGUsIFwiIGNvb3JkaW5hdGVzIGFyZSBtYWxmb3JtZWRcIikpKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnUG9pbnQnOlxuICAgICAgcG9pbnRGZWF0dXJlcy5wdXNoKHtcbiAgICAgICAgZ2VvbWV0cnk6IGdlb21ldHJ5LFxuICAgICAgICBzb3VyY2VGZWF0dXJlOiBzb3VyY2VGZWF0dXJlXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICBjb29yZGluYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICBwb2ludEZlYXR1cmVzLnB1c2goe1xuICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICB0eXBlOiAnUG9pbnQnLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHBvaW50XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzb3VyY2VGZWF0dXJlOiBzb3VyY2VGZWF0dXJlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgbGluZUZlYXR1cmVzLnB1c2goe1xuICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnksXG4gICAgICAgIHNvdXJjZUZlYXR1cmU6IHNvdXJjZUZlYXR1cmVcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgY29vcmRpbmF0ZXMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICBsaW5lRmVhdHVyZXMucHVzaCh7XG4gICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBwYXRoXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzb3VyY2VGZWF0dXJlOiBzb3VyY2VGZWF0dXJlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgcG9seWdvbkZlYXR1cmVzLnB1c2goe1xuICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnksXG4gICAgICAgIHNvdXJjZUZlYXR1cmU6IHNvdXJjZUZlYXR1cmVcbiAgICAgIH0pO1xuICAgICAgY29vcmRpbmF0ZXMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICBwb2x5Z29uT3V0bGluZUZlYXR1cmVzLnB1c2goe1xuICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICB0eXBlOiAnTGluZVN0cmluZycsXG4gICAgICAgICAgICBjb29yZGluYXRlczogcGF0aFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc291cmNlRmVhdHVyZTogc291cmNlRmVhdHVyZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdNdWx0aVBvbHlnb24nOlxuICAgICAgY29vcmRpbmF0ZXMuZm9yRWFjaChmdW5jdGlvbiAocG9seWdvbikge1xuICAgICAgICBwb2x5Z29uRmVhdHVyZXMucHVzaCh7XG4gICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBwb2x5Z29uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzb3VyY2VGZWF0dXJlOiBzb3VyY2VGZWF0dXJlXG4gICAgICAgIH0pO1xuICAgICAgICBwb2x5Z29uLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICBwb2x5Z29uT3V0bGluZUZlYXR1cmVzLnB1c2goe1xuICAgICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnLFxuICAgICAgICAgICAgICBjb29yZGluYXRlczogcGF0aFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvdXJjZUZlYXR1cmU6IHNvdXJjZUZlYXR1cmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwU291cmNlRmVhdHVyZSh3cmFwcGVkRmVhdHVyZSkge1xuICByZXR1cm4gd3JhcHBlZEZlYXR1cmUuc291cmNlRmVhdHVyZS5mZWF0dXJlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcFNvdXJjZUZlYXR1cmVJbmRleCh3cmFwcGVkRmVhdHVyZSkge1xuICByZXR1cm4gd3JhcHBlZEZlYXR1cmUuc291cmNlRmVhdHVyZS5pbmRleDtcbn1cbnZhciBDT09SRElOQVRFX05FU1RfTEVWRUwgPSB7XG4gIFBvaW50OiAxLFxuICBNdWx0aVBvaW50OiAyLFxuICBMaW5lU3RyaW5nOiAyLFxuICBNdWx0aUxpbmVTdHJpbmc6IDMsXG4gIFBvbHlnb246IDMsXG4gIE11bHRpUG9seWdvbjogNFxufTtcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUdlb21ldHJ5KHR5cGUsIGNvb3JkaW5hdGVzKSB7XG4gIHZhciBuZXN0TGV2ZWwgPSBDT09SRElOQVRFX05FU1RfTEVWRUxbdHlwZV07XG4gIGxvZy5hc3NlcnQobmVzdExldmVsLCBcIlVua25vd24gR2VvSlNPTiB0eXBlIFwiLmNvbmNhdCh0eXBlKSk7XG5cbiAgd2hpbGUgKGNvb3JkaW5hdGVzICYmIC0tbmVzdExldmVsID4gMCkge1xuICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXNbMF07XG4gIH1cblxuICByZXR1cm4gY29vcmRpbmF0ZXMgJiYgTnVtYmVyLmlzRmluaXRlKGNvb3JkaW5hdGVzWzBdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlb2pzb24uanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson.js\n");

/***/ }),

/***/ "./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/layers/Geojson/Geojson.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/layers/Geojson/Geojson.js ***!
  \********************************************************************************************/
/*! exports provided: getLayer, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLayer\", function() { return getLayer; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var deck_gl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deck.gl */ \"./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js\");\n/* harmony import */ var _DeckGLContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../DeckGLContainer */ \"./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/DeckGLContainer.js\");\n/* harmony import */ var _utils_colors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/colors */ \"./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/utils/colors.js\");\n/* harmony import */ var _utils_sandbox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/sandbox */ \"./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/utils/sandbox.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common */ \"./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/layers/common.js\");\n/* harmony import */ var _TooltipRow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../TooltipRow */ \"./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/TooltipRow.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable react/sort-prop-types */\n\n/* eslint-disable react/no-array-index-key */\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n // TODO import geojsonExtent from 'geojson-extent';\n\n\n\n\n\n\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth'\n};\n\nconst alterProps = (props, propOverrides) => {\n  const newProps = {};\n  Object.keys(props).forEach(k => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k]] = props[k];\n    } else {\n      newProps[k] = props[k];\n    }\n  });\n\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = Object(_utils_colors__WEBPACK_IMPORTED_MODULE_4__[\"hexToRGB\"])(props.fillColor);\n  }\n\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = Object(_utils_colors__WEBPACK_IMPORTED_MODULE_4__[\"hexToRGB\"])(props.strokeColor);\n  }\n\n  return _extends({}, newProps, {}, propOverrides);\n};\n\nlet features;\n\nconst recurseGeoJson = (node, propOverrides, extraProps) => {\n  if (node && node.features) {\n    node.features.forEach(obj => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n\n  if (node && node.geometry) {\n    const newNode = _extends({}, node, {\n      properties: alterProps(node.properties, propOverrides)\n    });\n\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n\n    features.push(newNode);\n  }\n};\n\nfunction setTooltipContent(o) {\n  return o.object.extraProps && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n    className: \"deckgl-tooltip\"\n  }, Object.keys(o.object.extraProps).map((prop, index) => react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_TooltipRow__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n    key: \"prop-\" + index,\n    label: prop + \": \",\n    value: \"\" + o.object.extraProps[prop]\n  })));\n}\n\nfunction getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides = {};\n\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n  let jsFnMutator;\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    jsFnMutator = Object(_utils_sandbox__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(fd.js_data_mutator);\n    features = jsFnMutator(features);\n  }\n\n  return new deck_gl__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_extends({\n    id: \"geojson-layer-\" + fd.slice_id,\n    filled: fd.filled,\n    data: features,\n    stroked: fd.stroked,\n    extruded: fd.extruded,\n    pointRadiusScale: fd.point_radius_scale\n  }, Object(_common__WEBPACK_IMPORTED_MODULE_6__[\"commonLayerProps\"])(fd, setTooltip, setTooltipContent)));\n}\nconst propTypes = {\n  formData: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,\n  payload: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,\n  setControlValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,\n  viewport: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object.isRequired,\n  onAddFilter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func\n};\nconst defaultProps = {\n  onAddFilter() {}\n\n};\n\nclass DeckGLGeoJson extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"containerRef\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef());\n\n    _defineProperty(this, \"setTooltip\", tooltip => {\n      const {\n        current\n      } = this.containerRef;\n\n      if (current) {\n        current.setTooltip(tooltip);\n      }\n    });\n  }\n\n  render() {\n    const {\n      formData,\n      payload,\n      setControlValue,\n      onAddFilter,\n      viewport\n    } = this.props; // TODO get this to work\n    // if (formData.autozoom) {\n    //   viewport = common.fitViewport(viewport, geojsonExtent(payload.data.features));\n    // }\n\n    const layer = getLayer(formData, payload, onAddFilter, this.setTooltip);\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_DeckGLContainer__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n      ref: this.containerRef,\n      mapboxApiAccessToken: payload.data.mapboxApiKey,\n      viewport: viewport,\n      layers: [layer],\n      mapStyle: formData.mapbox_style,\n      setControlValue: setControlValue\n    });\n  }\n\n}\n\nDeckGLGeoJson.propTypes = propTypes;\nDeckGLGeoJson.defaultProps = defaultProps;\n/* harmony default export */ __webpack_exports__[\"default\"] = (DeckGLGeoJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@superset-ui/legacy-preset-chart-deckgl/esm/layers/Geojson/Geojson.js\n");

/***/ })

}]);